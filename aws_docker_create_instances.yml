#!/usr/bin/ansible-playbook
---
- hosts: "all,!master"
  connection: local
  gather_facts: no
  become: no 

  vars:
    os: amazon
    var_aws_region: eu-central-1
    var_aws_key: frank.kortstiege_aws_eu
    var_aws_type: t2.micro
    var_subnet_id: subnet-a5a9f5d8

  tasks:

  - name: find latest AMI for RHEL7
    set_fact:
      image_id: ami-c86c3f23
    when: os == "rhel7"

  - name: find latest AMI for Amazon Linux 2
    ec2_ami_facts:
      owners: amazon
      region: "{{ var_aws_region }}"
      filters:
        name: "amzn2-ami-hvm-2*"
    register: amis
    delegate_to: localhost
    when: os == "amazon"

  - name: now get the latest one
    set_fact:
      latest_ami: >
        {{ amis.images | sort(attribute='creation_date') | last }}
    delegate_to: localhost
    when: os == "amazon"

  - name: save ami id in var
    set_fact:
      image_id: "{{ latest_ami.image_id }}"
    delegate_to: localhost
    when: os == "amazon"


  - name: Create an EC2 instance
    ec2:
      key_name: "{{ var_aws_key }}"
      instance_type: "{{ var_aws_type }}"
      image: "{{ image_id }}"
      region: "{{ var_aws_region }}"
      vpc_subnet_id: "{{ var_subnet_id }}"
      wait: no
      group: default
      count: 1
      assign_public_ip: yes
      instance_tags:
       Name: "{{ inventory_hostname }}" 
      state: present
    register: ec2
    delegate_to: localhost

- hosts: "all,!master"
  become: yes
  gather_facts: no

  tasks:
  - name: Add new instance to /etc/hosts
    lineinfile:
      path: /etc/hosts
      regexp: ".*{{ item.tags.Name }}$"
      line: "{{ item.private_ip }} {{ item.private_dns_name }} {{ item.tags.Name }}"
    with_items: "{{ ec2.instances }}"
    delegate_to: localhost

- hosts: "all,!master"
  remote_user: ec2-user
  become: yes
  gather_facts: no

  roles:
    - firststep
    - reboot
